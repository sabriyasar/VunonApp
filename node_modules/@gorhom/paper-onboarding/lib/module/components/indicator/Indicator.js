function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useMemo, useCallback, memo } from 'react';
import Animated from 'react-native-reanimated';
import { Svg, Circle } from 'react-native-svg'; // @ts-ignore ðŸ˜ž

import isEqual from 'lodash.isequal';
import { styles } from './styles';
const {
  interpolate,
  Extrapolate
} = Animated;
const AnimatedCircle = Animated.createAnimatedComponent(Circle);
const BORDER_WIDTH = 2;

const IndicatorComponent = ({
  index,
  indicatorSize,
  indicatorBackgroundColor,
  indicatorBorderColor,
  animatedIndex,
  item
}) => {
  const radius = useMemo(() => (indicatorSize - 2) / 2, [indicatorSize]); //#region animation

  const animatedRadius = interpolate(animatedIndex, {
    inputRange: [index - 1, index, index + 1],
    outputRange: [radius * 0.33, radius, radius * 0.33],
    extrapolate: Extrapolate.CLAMP
  });
  const animatedIconScale = interpolate(animatedIndex, {
    inputRange: [index - 1, index, index + 1],
    outputRange: [1 * 0.33, 1, 1 * 0.33],
    extrapolate: Extrapolate.CLAMP
  });
  const animatedIconOpacity = interpolate(animatedIndex, {
    inputRange: [index - 0.25, index, index + 0.25],
    outputRange: [0, 1, 0],
    extrapolate: Extrapolate.CLAMP
  });
  const animatedCircleFillOpacity = interpolate(animatedIndex, {
    inputRange: [index - 1, index],
    outputRange: [0, 1],
    extrapolate: Extrapolate.CLAMP
  }); //#endregion
  //#region styles

  const containerStyle = useMemo(() => _objectSpread(_objectSpread({}, styles.container), {
    width: indicatorSize,
    height: indicatorSize
  }), [indicatorSize]);
  const iconStyle = useMemo(() => _objectSpread(_objectSpread({}, styles.iconContainer), {
    left: BORDER_WIDTH * 2,
    right: BORDER_WIDTH * 2,
    top: BORDER_WIDTH * 2,
    bottom: BORDER_WIDTH * 2,
    borderRadius: indicatorSize,
    opacity: animatedIconOpacity,
    transform: [{
      scale: animatedIconScale
    }]
  }), // eslint-disable-next-line react-hooks/exhaustive-deps
  [indicatorSize]); //#endregion
  // renders

  const renderIcon = useCallback(() => {
    if (item.icon) {
      const IconComponent = item.icon;
      return /*#__PURE__*/React.createElement(Animated.View, {
        style: iconStyle
      }, typeof IconComponent === 'function' ? IconComponent({
        size: indicatorSize / 2
      }) : /*#__PURE__*/React.createElement(IconComponent, {
        size: indicatorSize / 2
      }));
    }

    return null;
  }, [item, indicatorSize, iconStyle]);
  return /*#__PURE__*/React.createElement(Animated.View, {
    style: containerStyle
  }, /*#__PURE__*/React.createElement(Svg, {
    width: indicatorSize,
    height: indicatorSize,
    viewBox: "0 0 ".concat(indicatorSize, " ").concat(indicatorSize)
  }, /*#__PURE__*/React.createElement(AnimatedCircle, {
    r: animatedRadius,
    cx: indicatorSize / 2,
    cy: indicatorSize / 2 // @ts-ignore
    ,
    fill: indicatorBackgroundColor,
    fillOpacity: animatedCircleFillOpacity,
    stroke: indicatorBorderColor,
    strokeWidth: BORDER_WIDTH
  })), renderIcon());
};

const Indicator = /*#__PURE__*/memo(IndicatorComponent, isEqual);
export default Indicator;
//# sourceMappingURL=Indicator.js.map