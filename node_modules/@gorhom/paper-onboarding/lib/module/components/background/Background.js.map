{"version":3,"sources":["Background.tsx"],"names":["React","memo","useMemo","Svg","isEqual","BackgroundCircle","calculateRectangleCircleRadius","styles","BackgroundComponent","animatedIndex","data","screenDimensions","safeInsets","indicatorSize","animatedIndicatorsContainerPosition","extendedSize","width","height","indicatorX","bottom","indicatorY","bottomPosition","container","map","item","index","backgroundColor","Background"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,OAAtB,QAAqC,OAArC;AACA,OAAOC,GAAP,MAAgB,kBAAhB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,SAASC,8BAAT,QAA+C,kBAA/C;AAEA,SAASC,MAAT,QAAuB,UAAvB;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAC3BC,EAAAA,aAD2B;AAE3BC,EAAAA,IAF2B;AAG3BC,EAAAA,gBAH2B;AAI3BC,EAAAA,UAJ2B;AAK3BC,EAAAA,aAL2B;AAM3BC,EAAAA;AAN2B,CAAD,KAOL;AACrB;AACA,QAAMC,YAAY,GAAGb,OAAO,CAAC,MAAM;AACjC,WAAOI,8BAA8B,CAAC;AACpCU,MAAAA,KAAK,EAAEL,gBAAgB,CAACK,KADY;AAEpCC,MAAAA,MAAM,EAAEN,gBAAgB,CAACM,MAFW;AAGpCC,MAAAA,UAAU,EAAEN,UAAU,CAACO,MAHa;AAIpCC,MAAAA,UAAU,EAAE;AAJwB,KAAD,CAArC;AAMD,GAP2B,EAOzB,CAACT,gBAAD,EAAmBC,UAAnB,CAPyB,CAA5B;AASA,QAAMS,cAAc,GAAGnB,OAAO,CAC5B,MAAMS,gBAAgB,CAACM,MAAjB,GAA0BJ,aAAa,GAAG,CAA1C,GAA8CD,UAAU,CAACO,MADnC,EAE5B,CAACR,gBAAD,EAAmBE,aAAnB,EAAkCD,UAAlC,CAF4B,CAA9B,CAXqB,CAerB;AAEA;;AACA,sBACE,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAEL,MAAM,CAACe,SAAnB;AAA8B,IAAA,aAAa,EAAC;AAA5C,KACGZ,IAAI,CAACa,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzB,wBACE,oBAAC,gBAAD;AACE,MAAA,GAAG,mBAAYA,KAAZ,CADL;AAEE,MAAA,KAAK,EAAEA,KAFT;AAGE,MAAA,aAAa,EAAEhB,aAHjB;AAIE,MAAA,KAAK,EAAEe,IAAI,CAACE,eAJd;AAKE,MAAA,YAAY,EAAEX,YALhB;AAME,MAAA,cAAc,EAAEM,cANlB;AAOE,MAAA,aAAa,EAAER,aAPjB;AAQE,MAAA,mCAAmC,EACjCC;AATJ,MADF;AAcD,GAfA,CADH,CADF;AAoBD,CA7CD;;AA+CA,MAAMa,UAAU,gBAAG1B,IAAI,CAACO,mBAAD,EAAsBJ,OAAtB,CAAvB;AAEA,eAAeuB,UAAf","sourcesContent":["import React, { memo, useMemo } from 'react';\nimport Svg from 'react-native-svg';\n// @ts-ignore ðŸ˜ž\nimport isEqual from 'lodash.isequal';\nimport BackgroundCircle from '../backgroundCircle';\nimport { calculateRectangleCircleRadius } from '../../utils/math';\nimport { BackgroundProps } from '../../types';\nimport { styles } from './styles';\n\nconst BackgroundComponent = ({\n  animatedIndex,\n  data,\n  screenDimensions,\n  safeInsets,\n  indicatorSize,\n  animatedIndicatorsContainerPosition,\n}: BackgroundProps) => {\n  //#region variables\n  const extendedSize = useMemo(() => {\n    return calculateRectangleCircleRadius({\n      width: screenDimensions.width,\n      height: screenDimensions.height,\n      indicatorX: safeInsets.bottom,\n      indicatorY: 0,\n    });\n  }, [screenDimensions, safeInsets]);\n\n  const bottomPosition = useMemo(\n    () => screenDimensions.height - indicatorSize / 2 - safeInsets.bottom,\n    [screenDimensions, indicatorSize, safeInsets]\n  );\n  //#endregion\n\n  // render\n  return (\n    <Svg style={styles.container} pointerEvents=\"none\">\n      {data.map((item, index) => {\n        return (\n          <BackgroundCircle\n            key={`circle-${index}`}\n            index={index}\n            animatedIndex={animatedIndex}\n            color={item.backgroundColor}\n            extendedSize={extendedSize}\n            bottomPosition={bottomPosition}\n            indicatorSize={indicatorSize}\n            animatedIndicatorsContainerPosition={\n              animatedIndicatorsContainerPosition\n            }\n          />\n        );\n      })}\n    </Svg>\n  );\n};\n\nconst Background = memo(BackgroundComponent, isEqual);\n\nexport default Background;\n"]}