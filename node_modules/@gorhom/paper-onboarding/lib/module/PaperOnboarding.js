import React, { useMemo, useRef, useCallback, memo, useState } from 'react';
import { Dimensions } from 'react-native';
import { usePanGestureHandler, useValue } from 'react-native-redash';
import { PanGestureHandler } from 'react-native-gesture-handler';
import Animated from 'react-native-reanimated'; // @ts-ignore ðŸ˜ž

import isEqual from 'lodash.isequal';
import Background from './components/background';
import Page from './components/page';
import IndicatorsContainer from './components/indicatorsContainer';
import CloseButton from './components/closeButton';
import { useTiming } from './useTiming';
import { DEFAULT_SAFE_INSET, DEFAULT_DIRECTION, DEFAULT_INDICATOR_SIZE, DEFAULT_INDICATOR_BORDER_COLOR, DEFAULT_INDICATOR_BACKGROUND_COLOR, DEFAULT_CLOSE_BUTTON_TEXT, DEFAULT_CLOSE_BUTTON_CALLBACK } from './constants';
import { styles } from './styles'; // @ts-ignore

Animated.addWhitelistedUIProps({
  cx: true,
  cy: true,
  r: true,
  fillOpacity: true,
  pointerEvents: true
});
const {
  interpolate,
  add,
  useCode,
  onChange,
  call
} = Animated;

const PaperOnboardingComponent = ({
  data,
  safeInsets: _safeInsets,
  direction = DEFAULT_DIRECTION,
  // indicator config
  indicatorSize = DEFAULT_INDICATOR_SIZE,
  indicatorBackgroundColor = DEFAULT_INDICATOR_BACKGROUND_COLOR,
  indicatorBorderColor = DEFAULT_INDICATOR_BORDER_COLOR,
  // override styles
  titleStyle,
  descriptionStyle,
  // close button config
  closeButton,
  closeButtonTextStyle,
  closeButtonText = DEFAULT_CLOSE_BUTTON_TEXT,
  onCloseButtonPress = DEFAULT_CLOSE_BUTTON_CALLBACK,
  onIndexChange
}) => {
  // state
  const [dimensions, setDimensions] = useState({
    width: Dimensions.get('window').width,
    height: Dimensions.get('window').height
  }); // refs

  const pagesRef = useRef(data.map(() => null)); //#region variables

  const safeInsets = useMemo(() => {
    var _safeInsets$top, _safeInsets$bottom, _safeInsets$left, _safeInsets$right;

    return {
      top: (_safeInsets$top = _safeInsets === null || _safeInsets === void 0 ? void 0 : _safeInsets.top) !== null && _safeInsets$top !== void 0 ? _safeInsets$top : DEFAULT_SAFE_INSET,
      bottom: (_safeInsets$bottom = _safeInsets === null || _safeInsets === void 0 ? void 0 : _safeInsets.bottom) !== null && _safeInsets$bottom !== void 0 ? _safeInsets$bottom : DEFAULT_SAFE_INSET,
      left: (_safeInsets$left = _safeInsets === null || _safeInsets === void 0 ? void 0 : _safeInsets.left) !== null && _safeInsets$left !== void 0 ? _safeInsets$left : DEFAULT_SAFE_INSET,
      right: (_safeInsets$right = _safeInsets === null || _safeInsets === void 0 ? void 0 : _safeInsets.right) !== null && _safeInsets$right !== void 0 ? _safeInsets$right : DEFAULT_SAFE_INSET
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [_safeInsets]); //#endregion
  // memo

  const {
    gestureHandler,
    state,
    translation,
    velocity
  } = usePanGestureHandler();
  const indicatorsContainerLeftPadding = useMemo(() => dimensions.width / 2 - indicatorSize / 2, [dimensions.width, indicatorSize]); // animations

  const animatedStaticIndex = useValue(0);
  const animatedIndex = useTiming({
    animatedStaticIndex,
    value: direction === 'horizontal' ? translation.x : translation.y,
    velocity: direction === 'horizontal' ? velocity.x : velocity.y,
    state: state,
    size: data.length,
    screenWidth: dimensions.width
  });
  const animatedIndicatorsContainerPosition = add(interpolate(animatedIndex, {
    inputRange: data.map((_, index) => index),
    outputRange: data.map((_, index) => index * indicatorSize * -1),
    extrapolate: Animated.Extrapolate.CLAMP
  }), indicatorsContainerLeftPadding); // callbacks

  const handlePageRef = useCallback((ref, index) => {
    pagesRef.current[index] = ref;
  }, []);
  const handleOnLayout = useCallback(({
    nativeEvent: {
      layout: {
        width,
        height
      }
    }
  }) => {
    setDimensions({
      width,
      height
    });
  }, []); //#region effects

  useCode(() => onChange(animatedStaticIndex, call([animatedStaticIndex], args => {
    /**
     * @DEV
     * here we directly manipulate pages native props by setting `pointerEvents`
     * to `auto` for current page and `none` for others.
     */
    pagesRef.current.map((pageRef, _index) => {
      // @ts-ignore
      pageRef.setNativeProps({
        pointerEvents: _index === args[0] ? 'auto' : 'none'
      });
    });

    if (onIndexChange) {
      onIndexChange(args[0]);
    }
  })), []); //#endregion
  // renders

  return /*#__PURE__*/React.createElement(PanGestureHandler, gestureHandler, /*#__PURE__*/React.createElement(Animated.View, {
    onLayout: handleOnLayout,
    style: styles.container
  }, /*#__PURE__*/React.createElement(Background, {
    animatedIndex: animatedIndex,
    data: data,
    safeInsets: safeInsets,
    screenDimensions: dimensions,
    indicatorSize: indicatorSize,
    animatedIndicatorsContainerPosition: animatedIndicatorsContainerPosition
  }), data.map((item, index) => /*#__PURE__*/React.createElement(Page, {
    key: "page-".concat(index),
    index: index,
    item: item,
    animatedIndex: animatedIndex,
    indicatorSize: indicatorSize,
    titleStyle: titleStyle,
    descriptionStyle: descriptionStyle,
    safeInsets: safeInsets,
    screenDimensions: dimensions,
    handleRef: handlePageRef
  })), /*#__PURE__*/React.createElement(IndicatorsContainer, {
    data: data,
    animatedIndex: animatedIndex,
    animatedIndicatorsContainerPosition: animatedIndicatorsContainerPosition,
    indicatorSize: indicatorSize,
    indicatorBackgroundColor: indicatorBackgroundColor,
    indicatorBorderColor: indicatorBorderColor,
    safeInsets: safeInsets
  }), /*#__PURE__*/React.createElement(CloseButton, {
    data: data,
    animatedIndex: animatedIndex,
    safeInsets: safeInsets,
    closeButtonText: closeButtonText,
    closeButtonTextStyle: closeButtonTextStyle,
    closeButton: closeButton,
    onCloseButtonPress: onCloseButtonPress
  })));
};

const PaperOnboarding = /*#__PURE__*/memo(PaperOnboardingComponent, isEqual);
export default PaperOnboarding;
//# sourceMappingURL=PaperOnboarding.js.map