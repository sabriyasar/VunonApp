{"version":3,"sources":["PaperOnboarding.tsx"],"names":["React","useMemo","useRef","useCallback","memo","useState","Dimensions","usePanGestureHandler","useValue","PanGestureHandler","Animated","isEqual","Background","Page","IndicatorsContainer","CloseButton","useTiming","DEFAULT_SAFE_INSET","DEFAULT_DIRECTION","DEFAULT_INDICATOR_SIZE","DEFAULT_INDICATOR_BORDER_COLOR","DEFAULT_INDICATOR_BACKGROUND_COLOR","DEFAULT_CLOSE_BUTTON_TEXT","DEFAULT_CLOSE_BUTTON_CALLBACK","styles","addWhitelistedUIProps","cx","cy","r","fillOpacity","pointerEvents","interpolate","add","useCode","onChange","call","PaperOnboardingComponent","data","safeInsets","_safeInsets","direction","indicatorSize","indicatorBackgroundColor","indicatorBorderColor","titleStyle","descriptionStyle","closeButton","closeButtonTextStyle","closeButtonText","onCloseButtonPress","onIndexChange","dimensions","setDimensions","width","get","height","pagesRef","map","top","bottom","left","right","gestureHandler","state","translation","velocity","indicatorsContainerLeftPadding","animatedStaticIndex","animatedIndex","value","x","y","size","length","screenWidth","animatedIndicatorsContainerPosition","inputRange","_","index","outputRange","extrapolate","Extrapolate","CLAMP","handlePageRef","ref","current","handleOnLayout","nativeEvent","layout","args","pageRef","_index","setNativeProps","container","item","PaperOnboarding"],"mappings":"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","sourcesContent":["import React, { useMemo, useRef, useCallback, memo, useState } from 'react';\nimport { Dimensions, Insets, LayoutChangeEvent } from 'react-native';\nimport { usePanGestureHandler, useValue } from 'react-native-redash';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\n// @ts-ignore ðŸ˜ž\nimport isEqual from 'lodash.isequal';\nimport Background from './components/background';\nimport Page from './components/page';\nimport IndicatorsContainer from './components/indicatorsContainer';\nimport CloseButton from './components/closeButton';\nimport { useTiming } from './useTiming';\nimport { PaperOnboardingProps, PaperOnboardingScreenDimensions } from './types';\nimport {\n  DEFAULT_SAFE_INSET,\n  DEFAULT_DIRECTION,\n  DEFAULT_INDICATOR_SIZE,\n  DEFAULT_INDICATOR_BORDER_COLOR,\n  DEFAULT_INDICATOR_BACKGROUND_COLOR,\n  DEFAULT_CLOSE_BUTTON_TEXT,\n  DEFAULT_CLOSE_BUTTON_CALLBACK,\n} from './constants';\nimport { styles } from './styles';\n\n// @ts-ignore\nAnimated.addWhitelistedUIProps({\n  cx: true,\n  cy: true,\n  r: true,\n  fillOpacity: true,\n  pointerEvents: true,\n});\n\nconst { interpolate, add, useCode, onChange, call } = Animated;\n\nconst PaperOnboardingComponent = ({\n  data,\n  safeInsets: _safeInsets,\n  direction = DEFAULT_DIRECTION,\n  // indicator config\n  indicatorSize = DEFAULT_INDICATOR_SIZE,\n  indicatorBackgroundColor = DEFAULT_INDICATOR_BACKGROUND_COLOR,\n  indicatorBorderColor = DEFAULT_INDICATOR_BORDER_COLOR,\n  // override styles\n  titleStyle,\n  descriptionStyle,\n  // close button config\n  closeButton,\n  closeButtonTextStyle,\n  closeButtonText = DEFAULT_CLOSE_BUTTON_TEXT,\n  onCloseButtonPress = DEFAULT_CLOSE_BUTTON_CALLBACK,\n  onIndexChange,\n}: PaperOnboardingProps) => {\n  // state\n  const [dimensions, setDimensions] = useState<PaperOnboardingScreenDimensions>(\n    {\n      width: Dimensions.get('window').width,\n      height: Dimensions.get('window').height,\n    }\n  );\n\n  // refs\n  const pagesRef = useRef<Array<Animated.View | null>>(data.map(() => null));\n\n  //#region variables\n  const safeInsets = useMemo<Required<Insets>>(() => {\n    return {\n      top: _safeInsets?.top ?? DEFAULT_SAFE_INSET,\n      bottom: _safeInsets?.bottom ?? DEFAULT_SAFE_INSET,\n      left: _safeInsets?.left ?? DEFAULT_SAFE_INSET,\n      right: _safeInsets?.right ?? DEFAULT_SAFE_INSET,\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [_safeInsets]);\n  //#endregion\n\n  // memo\n  const {\n    gestureHandler,\n    state,\n    translation,\n    velocity,\n  } = usePanGestureHandler();\n\n  const indicatorsContainerLeftPadding = useMemo(\n    () => dimensions.width / 2 - indicatorSize / 2,\n    [dimensions.width, indicatorSize]\n  );\n\n  // animations\n  const animatedStaticIndex = useValue(0);\n  const animatedIndex = useTiming({\n    animatedStaticIndex,\n    value: direction === 'horizontal' ? translation.x : translation.y,\n    velocity: direction === 'horizontal' ? velocity.x : velocity.y,\n    state: state,\n    size: data.length,\n    screenWidth: dimensions.width,\n  });\n\n  const animatedIndicatorsContainerPosition = add(\n    interpolate(animatedIndex, {\n      inputRange: data.map((_, index) => index),\n      outputRange: data.map((_, index) => index * indicatorSize * -1),\n      extrapolate: Animated.Extrapolate.CLAMP,\n    }),\n    indicatorsContainerLeftPadding\n  );\n\n  // callbacks\n  const handlePageRef = useCallback((ref, index) => {\n    pagesRef.current[index] = ref;\n  }, []);\n\n  const handleOnLayout = useCallback(\n    ({\n      nativeEvent: {\n        layout: { width, height },\n      },\n    }: LayoutChangeEvent) => {\n      setDimensions({\n        width,\n        height,\n      });\n    },\n    []\n  );\n\n  //#region effects\n  useCode(\n    () =>\n      onChange(\n        animatedStaticIndex,\n        call([animatedStaticIndex], args => {\n          /**\n           * @DEV\n           * here we directly manipulate pages native props by setting `pointerEvents`\n           * to `auto` for current page and `none` for others.\n           */\n          pagesRef.current.map((pageRef, _index) => {\n            // @ts-ignore\n            pageRef.setNativeProps({\n              pointerEvents: _index === args[0] ? 'auto' : 'none',\n            });\n          });\n\n          if (onIndexChange) {\n            onIndexChange(args[0]);\n          }\n        })\n      ),\n    []\n  );\n  //#endregion\n\n  // renders\n  return (\n    <PanGestureHandler {...gestureHandler}>\n      <Animated.View onLayout={handleOnLayout} style={styles.container}>\n        <Background\n          animatedIndex={animatedIndex}\n          data={data}\n          safeInsets={safeInsets}\n          screenDimensions={dimensions}\n          indicatorSize={indicatorSize}\n          animatedIndicatorsContainerPosition={\n            animatedIndicatorsContainerPosition\n          }\n        />\n\n        {data.map((item, index) => (\n          <Page\n            key={`page-${index}`}\n            index={index}\n            item={item}\n            animatedIndex={animatedIndex}\n            indicatorSize={indicatorSize}\n            titleStyle={titleStyle}\n            descriptionStyle={descriptionStyle}\n            safeInsets={safeInsets}\n            screenDimensions={dimensions}\n            handleRef={handlePageRef}\n          />\n        ))}\n\n        <IndicatorsContainer\n          data={data}\n          animatedIndex={animatedIndex}\n          animatedIndicatorsContainerPosition={\n            animatedIndicatorsContainerPosition\n          }\n          indicatorSize={indicatorSize}\n          indicatorBackgroundColor={indicatorBackgroundColor}\n          indicatorBorderColor={indicatorBorderColor}\n          safeInsets={safeInsets}\n        />\n\n        <CloseButton\n          data={data}\n          animatedIndex={animatedIndex}\n          safeInsets={safeInsets}\n          closeButtonText={closeButtonText}\n          closeButtonTextStyle={closeButtonTextStyle}\n          closeButton={closeButton}\n          onCloseButtonPress={onCloseButtonPress}\n        />\n      </Animated.View>\n    </PanGestureHandler>\n  );\n};\n\nconst PaperOnboarding = memo(PaperOnboardingComponent, isEqual);\n\nexport default PaperOnboarding;\n"]}