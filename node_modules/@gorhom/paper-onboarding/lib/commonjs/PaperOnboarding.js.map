{"version":3,"sources":["PaperOnboarding.tsx"],"names":["Animated","addWhitelistedUIProps","cx","cy","r","fillOpacity","pointerEvents","interpolate","add","useCode","onChange","call","PaperOnboardingComponent","data","safeInsets","_safeInsets","direction","DEFAULT_DIRECTION","indicatorSize","DEFAULT_INDICATOR_SIZE","indicatorBackgroundColor","DEFAULT_INDICATOR_BACKGROUND_COLOR","indicatorBorderColor","DEFAULT_INDICATOR_BORDER_COLOR","titleStyle","descriptionStyle","closeButton","closeButtonTextStyle","closeButtonText","DEFAULT_CLOSE_BUTTON_TEXT","onCloseButtonPress","DEFAULT_CLOSE_BUTTON_CALLBACK","onIndexChange","dimensions","setDimensions","width","Dimensions","get","height","pagesRef","map","top","DEFAULT_SAFE_INSET","bottom","left","right","gestureHandler","state","translation","velocity","indicatorsContainerLeftPadding","animatedStaticIndex","animatedIndex","value","x","y","size","length","screenWidth","animatedIndicatorsContainerPosition","inputRange","_","index","outputRange","extrapolate","Extrapolate","CLAMP","handlePageRef","ref","current","handleOnLayout","nativeEvent","layout","args","pageRef","_index","setNativeProps","styles","container","item","PaperOnboarding","isEqual"],"mappings":"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","sourcesContent":["import React, { useMemo, useRef, useCallback, memo, useState } from 'react';\nimport { Dimensions, Insets, LayoutChangeEvent } from 'react-native';\nimport { usePanGestureHandler, useValue } from 'react-native-redash';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\n// @ts-ignore ðŸ˜ž\nimport isEqual from 'lodash.isequal';\nimport Background from './components/background';\nimport Page from './components/page';\nimport IndicatorsContainer from './components/indicatorsContainer';\nimport CloseButton from './components/closeButton';\nimport { useTiming } from './useTiming';\nimport { PaperOnboardingProps, PaperOnboardingScreenDimensions } from './types';\nimport {\n  DEFAULT_SAFE_INSET,\n  DEFAULT_DIRECTION,\n  DEFAULT_INDICATOR_SIZE,\n  DEFAULT_INDICATOR_BORDER_COLOR,\n  DEFAULT_INDICATOR_BACKGROUND_COLOR,\n  DEFAULT_CLOSE_BUTTON_TEXT,\n  DEFAULT_CLOSE_BUTTON_CALLBACK,\n} from './constants';\nimport { styles } from './styles';\n\n// @ts-ignore\nAnimated.addWhitelistedUIProps({\n  cx: true,\n  cy: true,\n  r: true,\n  fillOpacity: true,\n  pointerEvents: true,\n});\n\nconst { interpolate, add, useCode, onChange, call } = Animated;\n\nconst PaperOnboardingComponent = ({\n  data,\n  safeInsets: _safeInsets,\n  direction = DEFAULT_DIRECTION,\n  // indicator config\n  indicatorSize = DEFAULT_INDICATOR_SIZE,\n  indicatorBackgroundColor = DEFAULT_INDICATOR_BACKGROUND_COLOR,\n  indicatorBorderColor = DEFAULT_INDICATOR_BORDER_COLOR,\n  // override styles\n  titleStyle,\n  descriptionStyle,\n  // close button config\n  closeButton,\n  closeButtonTextStyle,\n  closeButtonText = DEFAULT_CLOSE_BUTTON_TEXT,\n  onCloseButtonPress = DEFAULT_CLOSE_BUTTON_CALLBACK,\n  onIndexChange,\n}: PaperOnboardingProps) => {\n  // state\n  const [dimensions, setDimensions] = useState<PaperOnboardingScreenDimensions>(\n    {\n      width: Dimensions.get('window').width,\n      height: Dimensions.get('window').height,\n    }\n  );\n\n  // refs\n  const pagesRef = useRef<Array<Animated.View | null>>(data.map(() => null));\n\n  //#region variables\n  const safeInsets = useMemo<Required<Insets>>(() => {\n    return {\n      top: _safeInsets?.top ?? DEFAULT_SAFE_INSET,\n      bottom: _safeInsets?.bottom ?? DEFAULT_SAFE_INSET,\n      left: _safeInsets?.left ?? DEFAULT_SAFE_INSET,\n      right: _safeInsets?.right ?? DEFAULT_SAFE_INSET,\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [_safeInsets]);\n  //#endregion\n\n  // memo\n  const {\n    gestureHandler,\n    state,\n    translation,\n    velocity,\n  } = usePanGestureHandler();\n\n  const indicatorsContainerLeftPadding = useMemo(\n    () => dimensions.width / 2 - indicatorSize / 2,\n    [dimensions.width, indicatorSize]\n  );\n\n  // animations\n  const animatedStaticIndex = useValue(0);\n  const animatedIndex = useTiming({\n    animatedStaticIndex,\n    value: direction === 'horizontal' ? translation.x : translation.y,\n    velocity: direction === 'horizontal' ? velocity.x : velocity.y,\n    state: state,\n    size: data.length,\n    screenWidth: dimensions.width,\n  });\n\n  const animatedIndicatorsContainerPosition = add(\n    interpolate(animatedIndex, {\n      inputRange: data.map((_, index) => index),\n      outputRange: data.map((_, index) => index * indicatorSize * -1),\n      extrapolate: Animated.Extrapolate.CLAMP,\n    }),\n    indicatorsContainerLeftPadding\n  );\n\n  // callbacks\n  const handlePageRef = useCallback((ref, index) => {\n    pagesRef.current[index] = ref;\n  }, []);\n\n  const handleOnLayout = useCallback(\n    ({\n      nativeEvent: {\n        layout: { width, height },\n      },\n    }: LayoutChangeEvent) => {\n      setDimensions({\n        width,\n        height,\n      });\n    },\n    []\n  );\n\n  //#region effects\n  useCode(\n    () =>\n      onChange(\n        animatedStaticIndex,\n        call([animatedStaticIndex], args => {\n          /**\n           * @DEV\n           * here we directly manipulate pages native props by setting `pointerEvents`\n           * to `auto` for current page and `none` for others.\n           */\n          pagesRef.current.map((pageRef, _index) => {\n            // @ts-ignore\n            pageRef.setNativeProps({\n              pointerEvents: _index === args[0] ? 'auto' : 'none',\n            });\n          });\n\n          if (onIndexChange) {\n            onIndexChange(args[0]);\n          }\n        })\n      ),\n    []\n  );\n  //#endregion\n\n  // renders\n  return (\n    <PanGestureHandler {...gestureHandler}>\n      <Animated.View onLayout={handleOnLayout} style={styles.container}>\n        <Background\n          animatedIndex={animatedIndex}\n          data={data}\n          safeInsets={safeInsets}\n          screenDimensions={dimensions}\n          indicatorSize={indicatorSize}\n          animatedIndicatorsContainerPosition={\n            animatedIndicatorsContainerPosition\n          }\n        />\n\n        {data.map((item, index) => (\n          <Page\n            key={`page-${index}`}\n            index={index}\n            item={item}\n            animatedIndex={animatedIndex}\n            indicatorSize={indicatorSize}\n            titleStyle={titleStyle}\n            descriptionStyle={descriptionStyle}\n            safeInsets={safeInsets}\n            screenDimensions={dimensions}\n            handleRef={handlePageRef}\n          />\n        ))}\n\n        <IndicatorsContainer\n          data={data}\n          animatedIndex={animatedIndex}\n          animatedIndicatorsContainerPosition={\n            animatedIndicatorsContainerPosition\n          }\n          indicatorSize={indicatorSize}\n          indicatorBackgroundColor={indicatorBackgroundColor}\n          indicatorBorderColor={indicatorBorderColor}\n          safeInsets={safeInsets}\n        />\n\n        <CloseButton\n          data={data}\n          animatedIndex={animatedIndex}\n          safeInsets={safeInsets}\n          closeButtonText={closeButtonText}\n          closeButtonTextStyle={closeButtonTextStyle}\n          closeButton={closeButton}\n          onCloseButtonPress={onCloseButtonPress}\n        />\n      </Animated.View>\n    </PanGestureHandler>\n  );\n};\n\nconst PaperOnboarding = memo(PaperOnboardingComponent, isEqual);\n\nexport default PaperOnboarding;\n"]}