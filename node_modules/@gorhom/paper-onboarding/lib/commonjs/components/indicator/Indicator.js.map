{"version":3,"sources":["Indicator.tsx"],"names":["interpolate","Extrapolate","Animated","AnimatedCircle","createAnimatedComponent","Circle","BORDER_WIDTH","IndicatorComponent","index","indicatorSize","indicatorBackgroundColor","indicatorBorderColor","animatedIndex","item","radius","animatedRadius","inputRange","outputRange","extrapolate","CLAMP","animatedIconScale","animatedIconOpacity","animatedCircleFillOpacity","containerStyle","styles","container","width","height","iconStyle","iconContainer","left","right","top","bottom","borderRadius","opacity","transform","scale","renderIcon","icon","IconComponent","size","Indicator","isEqual"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback, memo } from 'react';\nimport { ViewStyle } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { Svg, Circle, CircleProps } from 'react-native-svg';\n// @ts-ignore ðŸ˜ž\nimport isEqual from 'lodash.isequal';\nimport { IndicatorProps } from '../../types';\nimport { styles } from './styles';\n\nconst { interpolate, Extrapolate } = Animated;\n\nconst AnimatedCircle = Animated.createAnimatedComponent(\n  Circle\n) as React.ComponentClass<\n  Animated.AnimateProps<ViewStyle, CircleProps & { style?: any }>\n>;\n\nconst BORDER_WIDTH = 2;\n\nconst IndicatorComponent = ({\n  index,\n  indicatorSize,\n  indicatorBackgroundColor,\n  indicatorBorderColor,\n  animatedIndex,\n  item,\n}: IndicatorProps) => {\n  const radius = useMemo(() => (indicatorSize - 2) / 2, [indicatorSize]);\n\n  //#region animation\n  const animatedRadius = interpolate(animatedIndex, {\n    inputRange: [index - 1, index, index + 1],\n    outputRange: [radius * 0.33, radius, radius * 0.33],\n    extrapolate: Extrapolate.CLAMP,\n  });\n\n  const animatedIconScale = interpolate(animatedIndex, {\n    inputRange: [index - 1, index, index + 1],\n    outputRange: [1 * 0.33, 1, 1 * 0.33],\n    extrapolate: Extrapolate.CLAMP,\n  });\n\n  const animatedIconOpacity = interpolate(animatedIndex, {\n    inputRange: [index - 0.25, index, index + 0.25],\n    outputRange: [0, 1, 0],\n    extrapolate: Extrapolate.CLAMP,\n  });\n\n  const animatedCircleFillOpacity = interpolate(animatedIndex, {\n    inputRange: [index - 1, index],\n    outputRange: [0, 1],\n    extrapolate: Extrapolate.CLAMP,\n  });\n  //#endregion\n\n  //#region styles\n  const containerStyle = useMemo(\n    () => ({\n      ...styles.container,\n      ...{\n        width: indicatorSize,\n        height: indicatorSize,\n      },\n    }),\n    [indicatorSize]\n  );\n\n  const iconStyle: any = useMemo(\n    () => ({\n      ...styles.iconContainer,\n      ...{\n        left: BORDER_WIDTH * 2,\n        right: BORDER_WIDTH * 2,\n        top: BORDER_WIDTH * 2,\n        bottom: BORDER_WIDTH * 2,\n        borderRadius: indicatorSize,\n        opacity: animatedIconOpacity,\n        transform: [{ scale: animatedIconScale }],\n      },\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [indicatorSize]\n  );\n  //#endregion\n\n  // renders\n  const renderIcon = useCallback(() => {\n    if (item.icon) {\n      const IconComponent: any = item.icon;\n      return (\n        <Animated.View style={iconStyle}>\n          {typeof IconComponent === 'function' ? (\n            IconComponent({\n              size: indicatorSize / 2,\n            })\n          ) : (\n            <IconComponent size={indicatorSize / 2} />\n          )}\n        </Animated.View>\n      );\n    }\n    return null;\n  }, [item, indicatorSize, iconStyle]);\n\n  return (\n    <Animated.View style={containerStyle}>\n      <Svg\n        width={indicatorSize}\n        height={indicatorSize}\n        viewBox={`0 0 ${indicatorSize} ${indicatorSize}`}\n      >\n        <AnimatedCircle\n          r={animatedRadius}\n          cx={indicatorSize / 2}\n          cy={indicatorSize / 2}\n          // @ts-ignore\n          fill={indicatorBackgroundColor}\n          fillOpacity={animatedCircleFillOpacity}\n          stroke={indicatorBorderColor}\n          strokeWidth={BORDER_WIDTH}\n        />\n      </Svg>\n      {renderIcon()}\n    </Animated.View>\n  );\n};\nconst Indicator = memo(IndicatorComponent, isEqual);\n\nexport default Indicator;\n"]}