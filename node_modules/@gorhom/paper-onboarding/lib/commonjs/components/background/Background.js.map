{"version":3,"sources":["Background.tsx"],"names":["BackgroundComponent","animatedIndex","data","screenDimensions","safeInsets","indicatorSize","animatedIndicatorsContainerPosition","extendedSize","width","height","indicatorX","bottom","indicatorY","bottomPosition","styles","container","map","item","index","backgroundColor","Background","isEqual"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;;;;;;;AALA;AAOA,MAAMA,mBAAmB,GAAG,CAAC;AAC3BC,EAAAA,aAD2B;AAE3BC,EAAAA,IAF2B;AAG3BC,EAAAA,gBAH2B;AAI3BC,EAAAA,UAJ2B;AAK3BC,EAAAA,aAL2B;AAM3BC,EAAAA;AAN2B,CAAD,KAOL;AACrB;AACA,QAAMC,YAAY,GAAG,oBAAQ,MAAM;AACjC,WAAO,0CAA+B;AACpCC,MAAAA,KAAK,EAAEL,gBAAgB,CAACK,KADY;AAEpCC,MAAAA,MAAM,EAAEN,gBAAgB,CAACM,MAFW;AAGpCC,MAAAA,UAAU,EAAEN,UAAU,CAACO,MAHa;AAIpCC,MAAAA,UAAU,EAAE;AAJwB,KAA/B,CAAP;AAMD,GAPoB,EAOlB,CAACT,gBAAD,EAAmBC,UAAnB,CAPkB,CAArB;AASA,QAAMS,cAAc,GAAG,oBACrB,MAAMV,gBAAgB,CAACM,MAAjB,GAA0BJ,aAAa,GAAG,CAA1C,GAA8CD,UAAU,CAACO,MAD1C,EAErB,CAACR,gBAAD,EAAmBE,aAAnB,EAAkCD,UAAlC,CAFqB,CAAvB,CAXqB,CAerB;AAEA;;AACA,sBACE,6BAAC,uBAAD;AAAK,IAAA,KAAK,EAAEU,eAAOC,SAAnB;AAA8B,IAAA,aAAa,EAAC;AAA5C,KACGb,IAAI,CAACc,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzB,wBACE,6BAAC,yBAAD;AACE,MAAA,GAAG,mBAAYA,KAAZ,CADL;AAEE,MAAA,KAAK,EAAEA,KAFT;AAGE,MAAA,aAAa,EAAEjB,aAHjB;AAIE,MAAA,KAAK,EAAEgB,IAAI,CAACE,eAJd;AAKE,MAAA,YAAY,EAAEZ,YALhB;AAME,MAAA,cAAc,EAAEM,cANlB;AAOE,MAAA,aAAa,EAAER,aAPjB;AAQE,MAAA,mCAAmC,EACjCC;AATJ,MADF;AAcD,GAfA,CADH,CADF;AAoBD,CA7CD;;AA+CA,MAAMc,UAAU,gBAAG,iBAAKpB,mBAAL,EAA0BqB,eAA1B,CAAnB;eAEeD,U","sourcesContent":["import React, { memo, useMemo } from 'react';\nimport Svg from 'react-native-svg';\n// @ts-ignore ðŸ˜ž\nimport isEqual from 'lodash.isequal';\nimport BackgroundCircle from '../backgroundCircle';\nimport { calculateRectangleCircleRadius } from '../../utils/math';\nimport { BackgroundProps } from '../../types';\nimport { styles } from './styles';\n\nconst BackgroundComponent = ({\n  animatedIndex,\n  data,\n  screenDimensions,\n  safeInsets,\n  indicatorSize,\n  animatedIndicatorsContainerPosition,\n}: BackgroundProps) => {\n  //#region variables\n  const extendedSize = useMemo(() => {\n    return calculateRectangleCircleRadius({\n      width: screenDimensions.width,\n      height: screenDimensions.height,\n      indicatorX: safeInsets.bottom,\n      indicatorY: 0,\n    });\n  }, [screenDimensions, safeInsets]);\n\n  const bottomPosition = useMemo(\n    () => screenDimensions.height - indicatorSize / 2 - safeInsets.bottom,\n    [screenDimensions, indicatorSize, safeInsets]\n  );\n  //#endregion\n\n  // render\n  return (\n    <Svg style={styles.container} pointerEvents=\"none\">\n      {data.map((item, index) => {\n        return (\n          <BackgroundCircle\n            key={`circle-${index}`}\n            index={index}\n            animatedIndex={animatedIndex}\n            color={item.backgroundColor}\n            extendedSize={extendedSize}\n            bottomPosition={bottomPosition}\n            indicatorSize={indicatorSize}\n            animatedIndicatorsContainerPosition={\n              animatedIndicatorsContainerPosition\n            }\n          />\n        );\n      })}\n    </Svg>\n  );\n};\n\nconst Background = memo(BackgroundComponent, isEqual);\n\nexport default Background;\n"]}