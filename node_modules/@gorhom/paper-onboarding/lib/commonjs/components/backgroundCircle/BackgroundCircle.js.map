{"version":3,"sources":["BackgroundCircle.tsx"],"names":["AnimatedCircle","Animated","createAnimatedComponent","Circle","BackgroundCircleComponent","index","animatedIndex","color","extendedSize","bottomPosition","indicatorSize","animatedIndicatorsContainerPosition","animatedFocus","inputRange","outputRange","extrapolate","Extrapolate","CLAMP","animatedRadius","animatedLeftPosition","BackgroundCircle","isEqual"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AAMA;;;;;;;;AADA;AAIA,MAAMA,cAAc,GAAGC,+BAASC,uBAAT,CACrBC,sBADqB,CAAvB;;AAKA,MAAMC,yBAAyB,GAAG,CAAC;AACjCC,EAAAA,KADiC;AAEjCC,EAAAA,aAFiC;AAGjCC,EAAAA,KAHiC;AAIjCC,EAAAA,YAJiC;AAKjCC,EAAAA,cALiC;AAMjCC,EAAAA,aANiC;AAOjCC,EAAAA;AAPiC,CAAD,KAQL;AAC3B;AACA;AAEA;AACA,QAAMC,aAAa,GAAG,wCAAYN,aAAZ,EAA2B;AAC/CO,IAAAA,UAAU,EAAE,CAACR,KAAK,GAAG,CAAT,EAAYA,KAAZ,EAAmBA,KAAK,GAAG,CAA3B,CADmC;AAE/CS,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFkC;AAG/CC,IAAAA,WAAW,EAAEC,mCAAYC;AAHsB,GAA3B,CAAtB;AAKA,QAAMC,cAAc,GAAG,wCAAYN,aAAZ,EAA2B;AAChDC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADoC;AAEhDC,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAIN,YAAJ,CAFmC;AAGhDO,IAAAA,WAAW,EAAEC,mCAAYC;AAHuB,GAA3B,CAAvB;AAKA,QAAME,oBAAoB,GAAG,gCAC3BR,mCAD2B,EAE3BD,aAAa,GAAG,CAFW,EAG3BL,KAAK,GAAGK,aAHmB,CAA7B,CAf2B,CAoB3B;AAEA;;AACA,sBACE,6BAAC,cAAD;AACE,IAAA,CAAC,EAAEQ,cADL;AAEE,IAAA,EAAE,EAAET,cAFN;AAGE,IAAA,EAAE,EAAEU,oBAHN;AAIE,IAAA,IAAI,EAAEZ;AAJR,IADF;AAQD,CAvCD;;AAyCA,MAAMa,gBAAgB,gBAAG,iBAAKhB,yBAAL,EAAgCiB,eAAhC,CAAzB;eAEeD,gB","sourcesContent":["import React, { memo } from 'react';\nimport { ViewStyle } from 'react-native';\nimport { Circle, CircleProps } from 'react-native-svg';\nimport Animated, {\n  interpolate,\n  add,\n  Extrapolate,\n} from 'react-native-reanimated';\n// @ts-ignore ðŸ˜ž\nimport isEqual from 'lodash.isequal';\nimport { BackgroundCircleProps } from '../../types';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(\n  Circle\n) as React.ComponentClass<\n  Animated.AnimateProps<ViewStyle, CircleProps & { style?: any }>\n>;\nconst BackgroundCircleComponent = ({\n  index,\n  animatedIndex,\n  color,\n  extendedSize,\n  bottomPosition,\n  indicatorSize,\n  animatedIndicatorsContainerPosition,\n}: BackgroundCircleProps) => {\n  //#region variables\n  //#endregion\n\n  //#region animations\n  const animatedFocus = interpolate(animatedIndex, {\n    inputRange: [index - 1, index, index + 1],\n    outputRange: [0, 1, 2],\n    extrapolate: Extrapolate.CLAMP,\n  });\n  const animatedRadius = interpolate(animatedFocus, {\n    inputRange: [0, 1],\n    outputRange: [0, extendedSize],\n    extrapolate: Extrapolate.CLAMP,\n  });\n  const animatedLeftPosition = add(\n    animatedIndicatorsContainerPosition,\n    indicatorSize / 2,\n    index * indicatorSize\n  );\n  //#endregion\n\n  // render\n  return (\n    <AnimatedCircle\n      r={animatedRadius}\n      cy={bottomPosition}\n      cx={animatedLeftPosition}\n      fill={color}\n    />\n  );\n};\n\nconst BackgroundCircle = memo(BackgroundCircleComponent, isEqual);\n\nexport default BackgroundCircle;\n"]}